options {    STATIC = false ;}PARSER_BEGIN(Calculator)    package parser.demo01;    import java.io.PrintStream ;    class Calculator {        public static void main( String[] args )            throws ParseException, TokenMgrError, NumberFormatException {            Calculator parser = new Calculator( System.in ) ;            parser.Start() ;        }        double previousValue = 0.0 ;    }PARSER_END(Calculator)SKIP : { " " | "\n" | "\r" | "\r\n" | "\t"}TOKEN : { < SEMI : ";" > }TOKEN : { < PLUS : "+" > }TOKEN : { < TIMES : "*" > }TOKEN : { < DIV : "/" > }TOKEN : { < MINUS : "-" > }TOKEN : { < NUMBER : <DIGITS>                   | <DIGITS> "." <DIGITS>                   | <DIGITS> "."                   | "." <DIGITS>                   >        }TOKEN : { < #DIGITS : (["0"-"9"])+ > }void Start() throws NumberFormatException :{}{    (        previousValue = Expression()        <SEMI>        { System.out.println( previousValue ) ; }    )*    <EOF>}double Expression() throws NumberFormatException : {    double i = 0;    double value =0 ;    boolean flag = false;}{    (        <MINUS>        {flag = true;}    )*    (value = Term())    {      if (flag)        value = -value;    }    (        (            <PLUS>            i = Term()            { value += i ; }        )        |        (            <MINUS>            i = Term()            {value -= i;}        )    )*    { return value ; }}double Term() throws NumberFormatException :{    double i = 0;    double j = 0;    Token t ;}{    i = Prmiary()    (        (            <TIMES>            j = Prmiary()            {i *= j;}        )        |        (            <DIV>            j = Prmiary()            {i /= j;}        )    )*    {return i;}}double Prmiary() throws NumberFormatException :{    Token t ;}{    t = <NUMBER>    { return Double.parseDouble( t.image ) ; }}